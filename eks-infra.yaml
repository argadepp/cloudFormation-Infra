Description:  This template is used to create EKS Cluster with Managed Nodes 

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
  ProductOwnerEmail:
    Description: Email id of the product owner
    Type: String
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  ImageAmi:
    Description: Pass the proper AMI ID
    Type: String  

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24

  ClusterName:
    Description: Name of the EKS Cluster
    Type: String

  ClusterVersion:
    Description: Cluster Version
    Type: String
    Default: "1.20"

  Product:
    Description: Product Name like Hotel/Car/Cart/Flight/Revenut/OCL
    Type: String

  ApplicationName:
    Description: Name of the application like Engine/USG
    Type: String
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
        - Key: !Join ["/",[kubernetes.io/cluster,!Ref ClusterName]]
          Value: owned

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
        - Key: !Join ["/",[kubernetes.io/cluster,!Ref ClusterName]]
          Value: owned

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
        - Key: !Join ["/",[kubernetes.io/cluster,!Ref ClusterName]]
          Value: owned

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)
        - Key: !Join ["/",[kubernetes.io/cluster,!Ref ClusterName]]
          Value: owned

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)
        - Key: !Join ["/",[kubernetes.io/cluster,!Ref ClusterName]]
          Value: owned

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc



  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1



  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2


  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)



  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2


  SGPing:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupDescription: SG to test ping
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 0.0.0.0/0


########################## EKS Cluster ###################################

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      RoleArn: !GetAtt EksServiceRole.Arn
      Version: !Ref ClusterVersion

  EksServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ClusterName}-service-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "eks.amazonaws.com" 
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
######################### Security Groups ####################
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for master plane of the cluster
      GroupName: !Sub "${ClusterName}-control-plane-security-group"
      VpcId: !Ref VPC
      Tags:
        - Key: "Product"
          Value: !Ref Product
        - Key: "ProductOwner"
          Value: !Ref ProductOwnerEmail


  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      GroupName: !Sub "${ClusterName}-workers-security-group"
      VpcId: !Ref VPC
      Tags:
        - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
          Value: owned
        - Key: "Product"
          Value: !Ref Product
        - Key: "ProductOwner"
          Value: !Ref ProductOwnerEmail

  NodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: -1
      FromPort: 0
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  ControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ClusterControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443  
  NodeGroupRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ClusterName}-node-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com" 
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy         

############################ NodeGroup ###################################

  MyLaunchTemplate: 
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: MyLaunchTemplate
      LaunchTemplateData:
        DisableApiTermination: true
        ImageId: !Ref ImageAmi
        InstanceType: t2.medium
        KeyName: eks-1
        SecurityGroupIds: 
          -  !Ref NodeSecurityGroup
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              set -ex
              B64_CLUSTER_CA=LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeU1Ea3lNekV6TXpRek1Wb1hEVE15TURreU1ERXpNelF6TVZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTDM4CjNtcUxNSFA3Y2cyc000bCsydFc1RFJKTkFkckVqbERnMVl3NlVDL2ZvankrUWgxbk9GU0thZ1BGMkZFb2lFaEMKTlZuWUxaNmRsMnN2MW1mMHlkVmV6ZmZZYlVEOXBSTXdFTStINVdKQ2gyK3R4bFNxanVYS1NtSW1CVjlSajlDawplVkEzY1ZqekR6eXEzTldoMXNEUm13ZkZ1cTg1dFJTdkNFNThwRVNJblU0Umcxd1g1eHJObzFBd3YyeG9hbk9MCkVKNHcrQWN3clo2b2JWMzQwbnpCZzEzVVBPVEZOZTAxRENONkIySWZoQ28vYjRaMUZacmpzazRsMThtRzY5bVMKdHU1blA5aEI2SEJSSFF5MWViYUxEVUNkVXdLbE90dDQrWnRMbm5UK3NrM3c1S1lCaWxHY2luVzBkam5CUUZYawo1Sk1nUnNRMnEwd2daOEFBZUdVQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZGSUtnZzFKaE1lNzFkUVMxdFlIbm54YW5LSkVNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFCNHpQRjhmeGZOWCtSaytsVmlrTEg3TWs3UnIrL1RsUktyMjVNTytYM0c5end6cytPbwpmMURrNGwxL3FydUh5N3BTV1lOSWF4ZEV6WUVUUjd0d2NKNnhPNm9kVDNiUkFoZkE5c01hR1Rlc0I1aVRxeFBsCldmY0R5QXNmbUlEUVpDQVdyeHVwWG44UitFTzVtZDZqaXBaZHE3ZFA1RzJuQ0NtaUE0TG92eXByOTQ2R0V3ekkKUUZWMm1WK1FsblZTTmpvTWVmbk50RXc5Yi9rS3JiSkZReHdQSnRNQ2pGVk5EdXZJNzN1L3QzR1ExMmg1MXRoeQptSkdHNW9tQklLWVNRckVkN3N1WWRIVlhGMVowbGFlSThjTWFxTi9UQm9weVl1ZkVMNjlnNy84M3NmVlYrYXdYCjhNN1ljNWkrMTE1SFpwcXh1Si9PV00rUGNQdnUveWR3bHNmWQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
              API_SERVER_URL=https://D900972F9565AF43CADD637596B14EEA.gr7.ap-south-1.eks.amazonaws.com
              /etc/eks/bootstrap.sh eksDev --b64-cluster-ca $B64_CLUSTER_CA --apiserver-endpoint $API_SERVER_URL

  EKSNodegroupPub:
    Type: 'AWS::EKS::Nodegroup'
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt NodeGroupRole.Arn
      LaunchTemplate: 
        Id: !Ref  MyLaunchTemplate
        #Name: !GetAtt MyLaunchTemplate.LaunchTemplateName
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
            
      ScalingConfig:
        MinSize: 1
        DesiredSize: 1
        MaxSize: 2
      Labels:
        Name: eksNodeGroup
      Subnets:
        - !Ref PublicSubnet1        




############################ Output #######################################


Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  EKSCluster:
    Description: Description about EKSCluster 
    Value: !Ref EKSCluster

